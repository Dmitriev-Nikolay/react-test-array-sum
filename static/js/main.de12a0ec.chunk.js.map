{"version":3,"sources":["registerServiceWorker.js","components/Number.jsx","components/InputNumbers.jsx","components/ResultArray.jsx","components/Button.jsx","pages/Home.jsx","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Number","React","memo","name","change","valueInput","className","type","min","value","onChange","InputNumbers","inputValueObj","handleChange","firstValueInput","secondValueInput","ResultArray","result","length","map","num","i","Button","setArray","arrayResult","allSum","onClick","Home","useState","resultOfNumbers","setIsResultOfNumbers","sumOfTwo","setIsSumOfTwo","setInputValues","getSum","useCallback","obj","Object","values","reduce","res","el","useEffect","event","target","arr","App","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.de12a0ec.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Number = React.memo(({ name, change, valueInput }) => {\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                className=\"inputs-block__item\"\r\n                type=\"number\"\r\n                min=\"1\"\r\n                name={ name }\r\n                value={ valueInput }\r\n                onChange={ change }\r\n            />\r\n        </>\r\n    );\r\n});\r\n\r\nexport default Number;","import React from 'react';\r\n\r\nimport { Number } from '../components';\r\n\r\nconst InputNumbers = React.memo(({ inputValueObj, handleChange }) => {\r\n\r\n    return (\r\n        <section className=\"inputs-block\">\r\n            <div className=\"inputs-block__items\">\r\n                <Number \r\n                    change={ handleChange } \r\n                    valueInput={ inputValueObj.firstValueInput } \r\n                    name='firstValueInput'\r\n                />\r\n                <Number \r\n                    change={ handleChange } \r\n                    valueInput={ inputValueObj.secondValueInput } \r\n                    name='secondValueInput'\r\n                />\r\n            </div>\r\n        </section>\r\n    );\r\n});\r\n\r\nexport default InputNumbers;","import React from 'react';\r\n\r\nconst ResultArray = React.memo(({ result }) => {\r\n\r\n    return (\r\n        <section className=\"array-block\">\r\n            {\r\n                result.length === 0 ?\r\n                    <p className=\"array-block__start\">Начинай</p>\r\n                    :\r\n                    <div className=\"array-block__result\">\r\n                        { \r\n                            result.map((num, i) => {\r\n                                return (\r\n                                    <p key={ `${ num }_${ i }` }>{ num }</p>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n            }\r\n        </section>\r\n    );\r\n});\r\n\r\nexport default ResultArray;\r\n","import React from 'react';\r\n\r\nconst Button = React.memo(({ setArray, arrayResult, allSum }) => {\r\n\r\n    const updateArray = () => {\r\n        setArray([...arrayResult, allSum]);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button type=\"button\" onClick={ updateArray }>Выполнить</button>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nimport { ResultArray, InputNumbers, Button } from '../components';\r\n\r\nconst Home = () => {\r\n    const [resultOfNumbers, setIsResultOfNumbers] = React.useState([]);\r\n    const [sumOfTwo, setIsSumOfTwo] = React.useState(0);\r\n    const [inputValueObj, setInputValues] = React.useState({ firstValueInput: 1, secondValueInput: 1 });\r\n\r\n    const handleChange = (event) => {\r\n        setInputValues({ ...inputValueObj, [event.target.name]: +event.target.value })\r\n    };\r\n\r\n    const getArray = (arr) => {\r\n        setIsResultOfNumbers(arr);\r\n    };\r\n\r\n    const getSum = React.useCallback((obj) => {\r\n        let result = Object.values(obj).reduce((res, el) => res += el, 0);\r\n        setIsSumOfTwo(result);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        getSum(inputValueObj);\r\n    }, [getSum, inputValueObj]);\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"container\">\r\n                <ResultArray\r\n                    result={ resultOfNumbers }\r\n                />\r\n                <InputNumbers\r\n                    handleChange={ handleChange }\r\n                    inputValueObj={ inputValueObj }\r\n                />\r\n                <Button\r\n                    setArray={ getArray }\r\n                    arrayResult={ resultOfNumbers }\r\n                    allSum={ sumOfTwo }\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\n\nimport { Home } from './pages';\n\nconst App = () => {\n  return (\n    <div className=\"wrapper\">\n        <Home />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport './scss/app.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nregisterServiceWorker();\n"],"sourceRoot":""}